/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tn.MedicaSud.app.client.gui;

import com.jfoenix.controls.JFXButton;
import javafx.stage.Stage;


import com.jfoenix.controls.JFXComboBox;
import com.jfoenix.controls.JFXTextField;


import java.io.IOException;
import java.net.URL;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.ResourceBundle;

import javax.naming.InitialContext;
import javax.naming.NamingException;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.image.ImageView;
import javafx.fxml.Initializable;
import javafx.scene.layout.AnchorPane;
import tn.MedicaSud.entities.Materiel;
import tn.MedicaSud.entities.Role;
import tn.MedicaSud.entities.StatutTicket;
import tn.MedicaSud.entities.Utilisateur;
import tn.MedicaSud.services.MaterielServicesRemote;
import tn.MedicaSud.services.UtilisateurServicesRemote;

/**
 * FXML Controller class
 *
 * @author USER
 */
public class AffecterUtilisateurMaterielController implements Initializable {

    @FXML
    private TableView<Utilisateur> UtilisateurTableView;
    @FXML
    private TableColumn<Utilisateur, String> codeUtilisateur;
    @FXML
    private TableColumn<Utilisateur, String> nomUtilisateur;
    @FXML
    private TableColumn<Utilisateur, String> prenomUtilisateur;
    @FXML
    private TableColumn<Utilisateur, String> emailUtilisateur;
    @FXML
    private TableColumn<Utilisateur, String> fonctionUtilisateur;
    @FXML
    private TableColumn<Utilisateur, String> motdepasseUtilisateur;
    @FXML
    private JFXButton Ajouter;
    private ObservableList<Materiel> data;
    Materiel materiel= new Materiel();
    @FXML
    private JFXButton enlever;
    @FXML
    private JFXButton Affecter;
    @FXML
    private TableView<Materiel> materiels;
   static Utilisateur utilisateur= new Utilisateur();
    Utilites utilities= new Utilites();
    private ObservableList<Utilisateur> utilisateursData;

    /**
     * Initializes the controller class.
     */
    @Override
    public void initialize(URL url, ResourceBundle rb) {
    	   

    }


    @FXML
    private void EnregistrerUtilisateur(ActionEvent event) throws NamingException, IOException {
    
    }
    
    public void RemplirTable(Materiel materiel)
    {	
    	List<Utilisateur> utilisateurs= new ArrayList<Utilisateur>();
    	List<Utilisateur> utilisateurs1= new ArrayList<Utilisateur>();
    	utilities.context= new InitialContext();
		utilities.utilisateurServicesRemote=(UtilisateurServicesRemote) utilities.context.lookup(utilities.utilRemote );
    	utilisateurs=utilities.utilisateurServicesRemote.findAll();
  	    for (Utilisateur utilisateur : utilisateurs) {
  		 boolean exist=false;
  		  utilisateurs=materiel.getUtilisateurs();
  		  for (Utilisateur utilisateur1 : utilisateurs) {
  			  if((utilisateur1.getCode().equals(utilisateur.getCode())))
  			  {  exist=true;	  }}
  		  if(!exist)
  			  materiels1.add(materiel);}
	  	   data=FXCollections.observableList(materiels1);	
    	
    		
	    	System.out.println(utilisateurs.size());
	    	utilisateursData=FXCollections.observableList(utilisateurs);
	   	    codeUtilisateur.setCellValueFactory(new PropertyValueFactory<>("code"));
	   	    nomUtilisateur.setCellValueFactory(new PropertyValueFactory<>("nom"));
	   	    prenomUtilisateur.setCellValueFactory(new PropertyValueFactory<>("prenom"));
	   	    motdepasseUtilisateur.setCellValueFactory(new PropertyValueFactory<>("password"));
	   	    emailUtilisateur.setCellValueFactory(new PropertyValueFactory<>("email"));
	   	    fonctionUtilisateur.setCellValueFactory(new PropertyValueFactory<>("fonction"));
	   	    UtilisateurTableView.setItems(utilisateursData);




    	} catch (NamingException e) {
			
		}
    
    }
   
    @FXML
    private void AjouterMaterielUtilisateur() throws NamingException, IOException
    {
    	    }
    @FXML private void EnleverMaterielUtilisateur() throws NamingException
    {
    	Materiel materiel= new Materiel();
    	materiel= materiels.getSelectionModel().getSelectedItem();
    	List<Materiel> materiels= new ArrayList<Materiel>();
    	materiels=utilisateur.getMateriels();
    	materiels.remove(materiel);
    	utilisateur.setMateriels(materiels);
    	utilities.context=new InitialContext();
    	utilities.utilisateurServicesRemote=(UtilisateurServicesRemote) utilities.context.lookup(utilities.utilRemote);
    	utilities.utilisateurServicesRemote.update(utilisateur);
    	//utilities.closeStage(Ajouter);
    	Stage stage = (Stage) Ajouter.getScene().getWindow();
    	stage.show();
    	utilities.GenererAlerte("materielEnlever");
    }
    @FXML
    private void AffecterMaterielUtilisateur() throws NamingException
    {
    	Materiel materiel= new Materiel();
    	materiel=materiels.getSelectionModel().getSelectedItem();
    	List<Materiel> materiels= new ArrayList<Materiel>();
    	materiels=utilisateur.getMateriels();
    	materiels.add(materiel);
    	utilisateur.setMateriels(materiels);
    	utilities.utilisateurServicesRemote=(UtilisateurServicesRemote) utilities.context.lookup(utilities.utilRemote);
    	utilities.utilisateurServicesRemote.update(utilisateur);
    	Stage stage = (Stage) Ajouter.getScene().getWindow();
    	stage.close();
    	
    	utilities.GenerertAletrtOk("Materiel affecter avec succes");
    	
    }
    

}
